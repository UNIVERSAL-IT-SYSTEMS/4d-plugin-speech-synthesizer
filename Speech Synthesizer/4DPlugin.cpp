/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Speech Synthesizer
 #	author : miyako
 #	2014/11/09
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

std::map<uint32_t, NSSpeechSynthesizer*> _refs;

NSSpeechSynthesizer *_ssCreate(C_LONGINT &index){
    
    NSSpeechSynthesizer *s = [[NSSpeechSynthesizer alloc]initWithVoice:nil];
    
    unsigned int i = 1;
    
    while (_refs.find(i) != _refs.end()) {
        i++;
    }
    
    _refs.insert(std::map<uint32_t, NSSpeechSynthesizer*>::value_type(i, s));
    
    index.setIntValue(i);
    
    return s;
}

void _ssDelete(C_LONGINT &index){
    
    NSSpeechSynthesizer *s = nil;
    
    std::map<uint32_t, NSSpeechSynthesizer*>::iterator pos = _refs.find(index.getIntValue());
    
    if(pos != _refs.end()) {
        s = pos->second;
        
        [s release];
        
        _refs.erase(pos);
    }
    
}

NSSpeechSynthesizer *_ssGet(C_LONGINT &index){
    
    NSSpeechSynthesizer *s = nil;
    
    std::map<uint32_t, NSSpeechSynthesizer*>::iterator pos = _refs.find(index.getIntValue());
    
    if(pos != _refs.end()) {
        s = pos->second;
    }
    
    return s;
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Speech

		case 1 :
			SPEECH_New(pResult, pParams);
			break;

		case 2 :
			SPEECH_SET_RATE(pResult, pParams);
			break;

		case 3 :
			SPEECH_Get_rate(pResult, pParams);
			break;

		case 4 :
			SPEECH_SET_VOICE(pResult, pParams);
			break;

		case 5 :
			SPEECH_Get_voice(pResult, pParams);
			break;

		case 6 :
			SPEECH_SET_VOLUME(pResult, pParams);
			break;

		case 7 :
			SPEECH_Get_volume(pResult, pParams);
			break;

		case 8 :
			SPEECH_START(pResult, pParams);
			break;

		case 9 :
			SPEECH_PAUSE(pResult, pParams);
			break;

		case 10 :
			SPEECH_CONTINUE(pResult, pParams);
			break;

		case 11 :
			SPEECH_CLEAR(pResult, pParams);
			break;

// --- Voice

		case 12 :
			SPEECH_VOICE_LIST(pResult, pParams);
			break;

		case 13 :
			SPEECH_Default_voice(pResult, pParams);
			break;

// --- Speech

		case 14 :
			SPEECH_To_data(pResult, pParams);
			break;

		case 15 :
			SPEECH_Is_speaking(pResult, pParams);
			break;

	}
}

// ------------------------------------ Speech ------------------------------------


void SPEECH_New(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_TEXT Param2;
    C_REAL Param3;
    C_REAL Param4;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    
    NSSpeechSynthesizer *synthesizer = _ssCreate(returnValue);
    
    if(Param2.getUTF16Length()){
        NSString *voice = Param2.copyUTF16String();
        [synthesizer setVoice:voice];
        [voice release];
    }
    
    if(Param3.getDoubleValue()){
        [synthesizer setVolume:Param3.getDoubleValue()];
    }
    
    if(Param4.getDoubleValue()){
        [synthesizer setRate:Param4.getDoubleValue()];
    }  
    
    returnValue.setReturn(pResult);
}


void SPEECH_SET_RATE(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_REAL Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        [synthesizer setRate:Param2.getDoubleValue()];
    }
}

void SPEECH_Get_rate(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_REAL returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        returnValue.setDoubleValue([synthesizer rate]);
    }
    
    returnValue.setReturn(pResult);
}

void SPEECH_SET_VOICE(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_TEXT Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(Param2.getUTF16Length()){
        NSString *voice = Param2.copyUTF16String();
        [synthesizer setVoice:voice];
        [voice release];
    }
}

void SPEECH_Get_voice(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        returnValue.setUTF16String([synthesizer voice]);
    }
    
    returnValue.setReturn(pResult);
}

void SPEECH_SET_VOLUME(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_REAL Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        [synthesizer setVolume:Param2.getDoubleValue()];
    }
}

void SPEECH_Get_volume(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_REAL returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        returnValue.setDoubleValue([synthesizer volume]);
    }
    
    returnValue.setReturn(pResult);
}

void SPEECH_START(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_LONGINT Param1;
    C_TEXT Param2;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        NSString *text = Param2.copyUTF16String();
        if([synthesizer startSpeakingString:text]){
            PA_YieldAbsolute();
        }
        [text release];
    }
}

void SPEECH_PAUSE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    NSSpeechBoundary boundary = Param2.getIntValue();
    if(synthesizer){
        [synthesizer pauseSpeakingAtBoundary:boundary];
    }
}

void SPEECH_CONTINUE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        [synthesizer continueSpeaking];
    }
}

void SPEECH_CLEAR(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        [synthesizer stopSpeaking];
        _ssDelete(Param1);
    }
}

// ------------------------------------- Voice ------------------------------------


void SPEECH_VOICE_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
    ARRAY_TEXT Param1;
    
    NSArray *voices = [NSSpeechSynthesizer availableVoices];
    
    Param1.setSize(1);
    
    for(unsigned int i = 0; i < [voices count] ;++i){
        Param1.appendUTF16String([voices objectAtIndex:i]);
    }
    
    Param1.toParamAtIndex(pParams, 1);
}

void SPEECH_Default_voice(sLONG_PTR *pResult, PackagePtr pParams)
{
    C_TEXT returnValue;
    
    returnValue.setUTF16String([NSSpeechSynthesizer defaultVoice]);
    
    returnValue.setReturn(pResult);
}

// ------------------------------------ Speech ------------------------------------

#define CMD_DELAY_PROCESS 323
#define delay_count 5

void SPEECH_To_data(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;
	C_BLOB returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        NSString *text = Param2.copyUTF16String();
#ifndef NSFoundationVersionNumber10_8  
        CFUUIDRef uuid = CFUUIDCreate(kCFAllocatorDefault);
        NSString *uuidStr = (NSString *)CFUUIDCreateString(kCFAllocatorDefault, uuid);
        NSString *fileName = [NSString stringWithFormat:@"%@.aiff", uuidStr]; 
        CFRelease(uuid);
        CFRelease(uuidStr);
#else
        NSString *fileName = [NSString stringWithFormat:@"%@.aiff", [[NSUUID UUID]UUIDString]];        
#endif
        NSString *filePath = [NSTemporaryDirectory() stringByAppendingPathComponent:fileName];
        
        NSURL *url = [[NSURL alloc]initFileURLWithPath:filePath];
        
        if([synthesizer startSpeakingString:text toURL:url]){
            //PA_PutProcessToSleep() not working?
            PA_Variable args[2];
            args[0] = PA_CreateVariable(eVK_Longint);
            PA_SetLongintVariable(&args[0], PA_GetCurrentProcessNumber());
            args[1] = PA_CreateVariable(eVK_Longint);
            PA_SetLongintVariable(&args[1], delay_count);
            
            do{
                
                PA_ExecuteCommandByID(CMD_DELAY_PROCESS, args, 2);
                
            }while((!PA_IsProcessDying()) && ([synthesizer isSpeaking]));
            
            PA_ClearVariable(&args[0]);	
            PA_ClearVariable(&args[1]);            
        }
        [url release];   
        [text release];
        
        NSData *data = [[NSData alloc]initWithContentsOfFile:filePath];
        returnValue.setBytes((const uint8_t *)[data bytes], [data length]);
        [data release];
        
        [[NSFileManager defaultManager]removeItemAtPath:filePath error:nil];
    }    
    
	returnValue.setReturn(pResult);
}

void SPEECH_Is_speaking(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

    NSSpeechSynthesizer *synthesizer = _ssGet(Param1);
    
    if(synthesizer){
        returnValue.setIntValue([synthesizer isSpeaking]);
    }

	returnValue.setReturn(pResult);
}
